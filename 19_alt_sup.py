
import telebot
from telebot import types
import time
import os

TELEGRAM_TOKEN = '720633788:AAHDpsGunfmCy5gzMSp40zgwoThIdK0c-LY'
path2Rootdir = 'C:\\Users\\S2\\Google –î–∏—Å–∫\\bot_data\\'

bot = telebot.TeleBot(TELEGRAM_TOKEN,threaded=False)
# —Å–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ–º - —ç–∫–∑–µ–º–ø—è—Ä –∫–ª–∞—Å—Å–∞ User
user_dict = {}

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ User
class User:
    def __init__(self, name):
        self.partition = None

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤—ã—à–µ—Å—Ç–æ—è—â–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
def get_new_partname(partition, separator):
    if partition+'\\'==path2Rootdir:
        return path2Rootdir
    pathlist = partition.split(separator)
    pathlist.pop()
    new_partition = separator.join(pathlist)
    return new_partition

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç
def send_resp(chat_id, path2file):
    if os.path.splitext(path2file)[1]=='.txt':
        bot.send_message(chat_id, read_textfile(path2file))       
    elif os.path.splitext(path2file)[1]=='.jpg' or os.path.splitext(path2file)[1]=='.png' or os.path.splitext(path2file)[1]=='.jpeg':
        bot.send_photo(chat_id, open(path2file, 'rb'))
    else:
        bot.send_document(chat_id, open(path2file, 'rb'))

def read_textfile(path2file):
    return open(path2file)

# –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–∏–ø—É –∑–Ω–∞—á–µ–Ω–∏—è
def set_btn_image(filename):
    if os.path.isdir(filename):
        btn_img = "üìÅ"
    else:
        if os.path.splitext(filename)[1]=='.txt': 
            btn_img = "üìÉ"
        elif os.path.splitext(filename)[1]=='.jpg' or os.path.splitext(filename)[1]=='.png' or os.path.splitext(filename)[1]=='.jpeg':
            btn_img = "üéë"
        elif os.path.splitext(filename)[1]=='.pdf' or os.path.splitext(filename)[1]=='.doc' or os.path.splitext(filename)[1]=='.docx':
            btn_img = "üìù"
        elif os.path.splitext(filename)[1]=='.html' or os.path.splitext(filename)[1]=='.htm':
            btn_img = "üìã"
        else:
            btn_img = '‚ùì'
    return btn_img

# –≥–µ–Ω–µ—Ä–∞—Ü–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞-–∫–∞—Ç–∞–ª–æ–≥–∞
def gen_markup(dirname, uplink):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
    markup.row_width = 3
    counter = 0
    for filename in os.listdir(dirname):
        if os.path.splitext(dirname+'\\'+filename)[1]=='.ini':
            continue
        if counter==0:
            markup.add(set_btn_image(dirname+'\\'+filename)+' '+filename)
        else:
            markup.row(set_btn_image(dirname+'\\'+filename)+' '+filename)
        counter = counter+1
    if uplink == 0:
        markup.add("üîô –ù–∞–∑–∞–¥","üîù –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def send_invitation(message, user):
    user.partition = path2Rootdir
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üëá',reply_markup=gen_markup(path2Rootdir,1))

# —Ä–∞–∑–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
def callback_query(message, user):
    path2dir = user.partition
    is_top_menu = 0
    if user.partition!=path2Rootdir:
        path_separator = '\\'
    else:
        path_separator = ''

    if message.text == "üîô –ù–∞–∑–∞–¥":
        user.partition = get_new_partname(path2dir, path_separator)
    else: 
        path2target = message.text[2:]
        user.partition = path2dir+path_separator+str(path2target)

    if os.path.isdir(user.partition):
        if user.partition+'\\' == path2Rootdir or user.partition == path2Rootdir:
            is_top_menu = 1

        if is_top_menu == 1:
            partlabel = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üëá'
        else:
            partlabel = user.partition.replace(path2Rootdir, '')
            partlabel = "–†–∞–∑–¥–µ–ª: "+partlabel.replace('\\', '|')

        bot.send_message(message.chat.id, partlabel, reply_markup=gen_markup(user.partition,is_top_menu))
    else:
        send_resp(message.chat.id, user.partition)
        user.partition = user.partition.replace(path_separator+str(path2target), '')

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start', 'help'])
def send_hellow(message):
    hellow_text = """–ü—Ä–∏–≤–µ—Ç‚úã –Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìï 
üëâ –î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –õ–Æ–ë–û–ï —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
üëâ –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. 
‚ùó –§–∞–π–ª—ã —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ —É–º–µ—é! –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª - —è –µ–≥–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é!"""
    bot.send_message(message.chat.id, hellow_text)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
@bot.message_handler(func=lambda message: True)
def message_handler(message):
    chat_id = message.chat.id
    try:
        user = user_dict[chat_id]
    except Exception:
        user = User(chat_id)
        user_dict[chat_id] = user    
    if user.partition == None or message.text == "üîù –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        send_invitation(message, user)
    else:
        try:
            callback_query(message, user)
        except Exception:
            send_invitation(message, user)


# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

while True:
    try:
      bot.polling(none_stop=True)

    except Exception:
         #logger.error(e)  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ print(e) –µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
         # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
         time.sleep(5)